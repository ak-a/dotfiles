#!bash


# Shell history stuff
shopt -s cmdhist
shopt -s histappend
shopt -s histreedit
shopt -s histverify

HISTCONTROL=ignoredups:ignorespace:erasedups
HISTSIZE=50000
HISTFILESIZE=10
HISTTIMEFORMAT="[%Y-%m-%dT%H:%M:%S] "

export HISTDIR=$HOME/.histdir
export HISTARCHIVE=$HOME/.histarchive
[[ -d $HISTDIR ]] || mkdir -p $HISTDIR
[[ -d $HISTARCHIVE ]] || mkdir -p $HISTARCHIVE

HISTFILESIZE=500000
HISTFILE=$HISTDIR/${HOSTNAME:-$(hostname -s)}.$(tty | cut -d/ -f4).$$
HISTFILEMERGE=$HOME/.bash_history_merged

_slurp_other_shell_histories() {
    local _histfile
    local _histfilepath
    while read -r _histfile
    do
        _histfilepath=$HISTDIR/$_histfile
        # read other shell histories
        [[ ${_histfilepath} != ${HISTFILE} ]] &&
            history -r ${_histfilepath}
    done < <(ls -rt1 $HISTDIR)
    _HISTORYFIRSTRUN=true
}

get_lock_on_file() {
    local lockfile tmpfile timeout

    # try and get a lock 'mv' is atomic (at least on local fs)
    lockfile=${1}
    tmpfile=$(mktemp -p ${1%/*})        # make tempfile in same directory
    [[ $? -ne 0 ]] && return 1          # if this fails, then we can't do much

    timeout=0                           # default timeout is 10
    until (( timeout++ == ${2:-10} )) \
        || mv -n $tmpfile $lockfile \
        && [[ ! -f $tmpfile ]]
    do
        echo "waiting for lockfile '$lockfile'" >&2
        sleep $timeout                  # this is back-off second by second
    done

    return 0
}

# should be called at shell exit
history_merge_at_shell_exit() {
    local lockfile=$HISTDIR/_merge.lock

    # if we didn't set a MERGE filename, skip
    [[ -z $HISTFILEMERGE ]] && return

    get_lock_on_file $lockfile || return

    history -a
    history -c
    #history | wc -l
    history -r $HISTFILEMERGE
    #history | wc -l
    history -r $HISTFILE
    #history | wc -l
    history -w $lockfile
    cp --backup=numbered $HISTFILEMERGE $HISTARCHIVE/merged
    mv $lockfile $HISTFILEMERGE
    mv $HISTFILE $HISTARCHIVE
}


# assumes a 'history -a' in prompt_command and
# needs a history -w $HISTFILEMERGE in .bash_logout
prompt_history() {
    if [[ -z ${_HISTORYFIRSTRUN} ]]; then
        [[ -r $HISTFILEMERGE ]] && history -r $HISTFILEMERGE
        _slurp_other_shell_histories
    fi
    history -a
    history -n
}
