#!bash

# this is our history setup stuff
export HISTDIR=$HOME/.histdir
export HISTARCHIVE=$HOME/.histarchive
[[ -d $HISTDIR ]] || mkdir -p $HISTDIR
[[ -d $HISTARCHIVE ]] || mkdir -p $HISTARCHIVE
HISTFILEMERGE=$HOME/.bash_history_merged
export HISTMAXSIZE=1000000      # max of 10m lines of history

# Shell history stuff
shopt -s cmdhist
shopt -s histappend
shopt -s histreedit
shopt -s histverify

# see help history for these settings, or man bash
HISTCONTROL=ignoredups:ignorespace:erasedups
HISTFILE=$HISTDIR/${HOSTNAME:-$(hostname -s)}.$(tty | cut -d/ -f4).$$
HISTFILESIZE=${HISTMAXSIZE}        # keep a 10m of merged history
HISTSIZE=${HISTMAXSIZE}            # keep all the history whilst we merge things
HISTTIMEFORMAT="[%Y-%m-%dT%H:%M:%S] "

# this is to get shell history from currently running shells or shells that
# have exitted abnormally and so haven't merged their shell history
_slurp_other_shell_histories() {
    local shell_history
    local history_fullpath
    local -a gone_history
    local -a running_history

    _HISTORYFIRSTRUN=true
    history -c

    # see what other history files are around for other shells that might be still running
    while read -r shell_history
    do
        history_fullpath=$HISTDIR/$shell_history
        if [[ $(readlink /proc/${shell_history##*.}/exe) =~ bash ]]; then
            # if the shell is still running don't merge yet, this is so we
            # can write a merge file of shells that didn't exit cleanly (reboot maybe)
            running_history+=($history_fullpath)
        else
            gone_history+=($history_fullpath)
        fi
    done < <(ls -rt1 $HISTDIR)

    if [[ ${#gone_history[@]} -gt 0 ]]; then
        if get_lock_on_file $HISTDIR/_merge_old.lock; then
            for history_fullpath in "${gone_history[@]}"
            do
                # shell isn't running, so we can ready and then do a merge below
                history -r ${history_fullpath}
                mv -vi ${history_fullpath} ${HISTARCHIVE}
            done
            # so pretend the old shells are our history
            history -w
            # if we have picked up some exit'd shells that didn't do the merge, we do it for them
            history_merge
            # clear read pre-merged histories
            history -c
            rm $HISTDIR/_merge_old.lock
        else
            # can't get a lock, so we will read, but leave filesystem alone
            for history_fullpath in "${gone_history[@]}"
            do
                history -r ${history_fullpath}
            done
        fi
    fi
    export HISTFILESIZE=10000           # our history is up to 10k lines
    history -w      # don't duplicate merged history in our file
    history -a
    [[ -r $HISTFILEMERGE ]] && history -r $HISTFILEMERGE

    # now we can read shell history of running shells.
    for history_fullpath in "${running_history[@]}"
    do
        history -r ${history_fullpath}
    done
}

get_lock_on_file() {
    local lockfile tmpfile timeout

    # try and get a lock 'mv' is atomic (at least on local fs)
    lockfile=${1}
    tmpfile=$(mktemp -p ${1%/*})        # make tempfile in same directory
    [[ $? -ne 0 ]] && return 1          # if this fails, then we can't do much

    timeout=0                           # default timeout is 10
    until (( timeout++ == ${2:-10} )) \
        || mv -n $tmpfile $lockfile \
        && [[ ! -f $tmpfile ]]
    do
        echo "waiting for lockfile '$lockfile'" >&2
        sleep $timeout                  # this is back-off second by second
    done

    return 0
}

# should be called at shell exit
history_merge_at_shell_exit() {
    history_merge
    # keep a backup
    mv -i $HISTFILE $HISTARCHIVE    # keep history file just in case
}

history_merge() {
    local lockfile=$HISTDIR/_merge.lock
    local ourhistfile=$HISTFILE
    local ourhistfilesize=$HISTFILESIZE

    # if we didn't set a MERGE filename, skip
    [[ -z $HISTFILEMERGE ]] && return

    get_lock_on_file $lockfile || return

    history -a                      # add any missing history to our HISTFILE
    unset HISTFILE                  # now munge history without clobbering our HISTFILE
    history -c                      # clear HISTORY
    history -r $HISTFILEMERGE       # read old merged file
    history -r $ourhistfile         # read back our history
    #history | wc -l
    HISTFILESIZE=${HISTMAXSIZE}     # make sure we can merge all the history up to max in a file
    history -w $lockfile            # write the new merge

    # now archive old merge and keep a few around
    logrotate --log $HISTARCHIVE/logrotate.log --state $HISTARCHIVE/logrotate.state $HISTARCHIVE/logrotate.conf --force
    mv -i $HISTFILEMERGE $HISTARCHIVE/merged
    mv $lockfile $HISTFILEMERGE     # now put merged history in place for next shell
    #wc -l $HISTFILEMERGE
    
    # put our shell settings back
    export HISTFILE=$ourhistfile
    export HISTFILESIZE=${ourhistfilesize}        # set back so we only keep 10k of our history in a file
}

[[ -z ${_HISTORYFIRSTRUN} ]] && _slurp_other_shell_histories

# assumes a 'history -a' in prompt_command and
# needs a history_merge in .bash_logout
prompt_history() {
    history -a
    history -n
}

declare -xf prompt_history history_merge_at_shell_exit history_merge

cat <<CONF > $HISTARCHIVE/logrotate.conf
$HISTARCHIVE/merged {
    rotate 10
    nocompress
    nocreate
    missingok
}
CONF
