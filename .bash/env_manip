#!/bin/bash

# Environment manipulation functions

_VarRemove()
{
# VAR value - removes value from colon separated $VAR
# removes value from environment VAR if it is there
    [[ ${BASH_VERSINFO[0]} == 3 ]] && return
    local IFS current new
    IFS=:
    eval "current=(\$$1)"
    # add a # at end of each element
    current=("${current[@]/%/#}")
    # add a # at start of each element
    current=("${current[@]/#/#}")
    new=(${current[@]###$2#})
    # so now have #ele# #ele2# which we can remove with fear of
    # matching partials, but we did assume # isn't part of the var :-(
    unset IFS
    # strip the hashes
    new=(${new[@]//#})
    IFS=:
    eval "$1"="${new[*]}"
}       # grr syntax check "

_VarAppend()
# VAR value, VAR=$VAR:$value equivalent
{
    local var=$1
    shift
    local i
    for i in "$@"
    do
	_VarRemove $var $i
        # shellcheck disable=SC1083
	eval export $var=\${$var:+\$$var\\:}$i
    done
}

_VarPrepend()
# VAR value, VAR=$value:$VAR equivalent
# duplicates are removed
{
    local var=$1
    shift
    local i
    for i in "$@"
    do
	_VarRemove $var $i
        # shellcheck disable=SC1083
	eval export $var=$i\${$var:+\\:\$$var}
    done
}

_pendPath() { # Pre/Ap dir...
    local pre_ap
    pre_ap=$1; shift
    for path in "$@"
    do
        [[ -d "$path/" ]] || {
            echo "${FUNCNAME[0]}: '$path' not a directory, skipping"
            continue
        }
        eval _Var${pre_ap}pend PATH \"$path\"
    done
}
PrependPath() { _pendPath Pre "$@"; }
AppendPath() { _pendPath Ap "$@"; }

_remove_var_dupes() {       # <var> [<sep>] reads $var and keeps order, but removes trailing dupes, separated by <sep>, default ':'
    local IFS
    local -a vararry strippedvar newvar
    local sep
    sep=${2:-:}         # default is colon
    IFS=${sep}
    eval "vararry=(\$$1)"
    for p in "${vararry[@]}"
    do
        strippedvar=("${strippedvar[@]%%#$p}")
        strippedvar+=("#$p")
    done
    unset IFS
    # shellcheck disable=SC2068
    newvar=$(printf "%s${sep}" ${strippedvar[@]/##})
    # remove extra trailing separator
    eval $1=${newvar/%${sep}}
}
_remove_path_dupes()        # reads PATH and keeps order, but removes trailing dupes
{
    _remove_var_dupes PATH
}
