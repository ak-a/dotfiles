#!/bin/bash
#
# this is only sourced if we are interactive, but will be sourced before other stuff
# good place to put setup and environment stuff
#
[[ -f /etc/bash_completion && ${_bash_completion_done} != "$$" ]] && {
    source /etc/bash_completion
    for c in /home/linuxbrew/.linuxbrew/etc/bash_completion.d/*; do
        # shellcheck disable=SC1090
        [[ -r ${c} ]] && source ${c}
    done
}
_bash_completion_done=$$

# shellcheck disable=SC2190
declare -A _completion_commands=(
    argocd "completion bash"
    gcloud "completion bash"
    gh "completion -s bash"
    helm "completion bash"
    jira "completion bash"
    k9sectl "completion bash"
    kubectl "completion bash"
    kustomize "completion bash"
)

_interactive_source_completions_by_command() {
    local _seven_days_ago _command _c_cache
    _seven_days_ago=$(mktemp)
    touch -d "-7 days" ${_seven_days_ago}
    for _command in ${!_completion_commands[*]}; do
        # if we can't find the command, we can skip
        type -t ${_command} &> /dev/null || continue

        # do we have the completion already done?
        complete | command grep -E -q -e "-F \w+ ${_command}\$" && continue

        # so now we check the cache of the completion, generate if needed
        # and slurp it in
        _c_cache=~/.bash/completion-${_command}
        [[ -s ${_c_cache} && ${_c_cache} -nt ${_seven_days_ago} ]] || {
            ${_command} ${_completion_commands[${_command}]} 2> /dev/null > ${_c_cache}
        }
        # shellcheck disable=SC1090
        source ${_c_cache}
        _completion_commands_done[${_command}]=1
    done
    rm -f ${_seven_days_ago}
}

_interactive_source_completions_by_command

type -t kubectl &> /dev/null && {
    alias k=kubectl
    complete -o default -F __start_kubectl k
}
type -t kubectx &> /dev/null && alias kx=kubectx
type -t terraform &> /dev/null && {
    complete -C $(type -p terraform) terraform
    alias tf=terraform
    complete -C $(type -p terraform) tf
}
type -t terragrunt &> /dev/null && alias tg=terragrunt

# shellcheck disable=SC1091
[[ -n ${HOMEBREW_PREFIX} && -r ${HOMEBREW_PREFIX}/etc/bash_completion ]] \
    && source ${HOMEBREW_PREFIX}/etc/bash_completion

# Environment setup
# #################
# I rule over all the other PATH bits
PrependPath ${HOME}/bin

# to avoid cm issues on centOS 5
export EDITOR=vim
export FIGNORE="~:.sw?:.un~"

#

# Aliases
# #######

#alias ls='ls -h --color=tty'                 # classify files in colour
alias mux=tmuxinator
type -t jless &> /dev/null && alias yless="jless --yaml"
alias prstate='gh pr list --search head:$(git branch --show-current) --state all --jq .[].state --json state'

# shopt
# #####

shopt -s autocd   # can type bin<CR> to cd to bin
shopt -s cdspell  # autocorrect cd spellings
shopt -s execfail # don't exit if exec fails

# Functions
# #########

function settitle() { echo -n "^[]2;$*^G^[]1;$*^G"; }
# shellcheck disable=SC2032
function grep() {
    # show differences in colour
    command grep --exclude '*~' --exclude '.*sw?' --exclude '.*.un~' --color "${@}"
}

export SHELLCHECK_OPTS="-e SC2086 -e SC2046"

gofind() { # [dir] [test]
    local testarg
    testarg=true
    [[ -z ${2} ]] && testarg=(! -name "*_test.go")

    find ${1:-.} \( -name "*.go" -a "${testarg[@]}" \) -print0
}

gogrep() {
    # shellcheck disable=SC2033
    gofind ${2} ${3} | xargs -0 grep ${4} -e "${1}"
}

ygrep() { # grep in yaml
    grep -r ${2:.} --include "*.yaml" ${3} -e "${1}"
}

function urldecode() {
    : "${*//+/ }"
    echo -e "${_//%/\\x}"
}
urlencode() {
    # urlencode <string>
    local length="${#1}"
    for ((i = 0; i < length; i++)); do
        local c="${1:i:1}"
        case ${c} in
            [a-zA-Z0-9.~_-]) printf "%s" "${c}" ;;
            *) printf '%%%02X' "'${c}" ;;
        esac
    done
}

# add any clean-up etc here
bash_trap_exit() {
    [[ $(type -t history_merge_at_shell_exit) == function ]] && history_merge_at_shell_exit
    rm -f /tmp/bashtrace.$$.txt /tmp/bashtrace.$$.txt
}

trap -- bash_trap_exit EXIT

kb() {
    local kbdir
    [[ -f ${1} && ${1} =~ .*/kustomization.yaml ]] && kbdir=${1%/*} || kbdir=${1}
    [[ -d ${kbdir} ]] || {
        echo "kb: ${kbdir} not a directory" >&2
        return 1
    }
    [[ -r ${kbdir}/kustomization.yaml ]] || {
        echo "kb: ${kbdir} not a kustomize directory" >&2
        return 1
    }
    kustomize build --enable-helm --load-restrictor LoadRestrictionsNone ${kbdir}
}

[[ -r ~/.ssh/jira-token.sh ]] && source ~/.ssh/jira-token.sh

# Ghostty
[[ -r ${GHOSTTY_RESOURCES_DIR}/shell-integration/bash/ghostty.bash ]] && source ${GHOSTTY_RESOURCES_DIR}/shell-integration/bash/ghostty.bash
